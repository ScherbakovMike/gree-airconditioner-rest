name: PR Build and Quality Gate

on:
  pull_request:
    branches: [ master, main ]
    types: [opened, synchronize, reopened]

jobs:
  build-and-analyze:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        # Fetch full history for better analysis
        fetch-depth: 0
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    
    - name: Cache SonarQube packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Verify Maven Setup
      run: mvn --version
    
    - name: Run Tests
      run: mvn clean verify
    
    - name: Check Code Formatting
      run: mvn spotless:check
    
    - name: Generate Test Coverage Report
      run: mvn jacoco:report
    
    - name: SonarQube Analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        mvn sonar:sonar \
          -Dsonar.projectKey=${{ vars.SONAR_PROJECT_KEY }} \
          -Dsonar.host.url=${{ vars.SONAR_HOST_URL }} \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
          -Dsonar.pullrequest.key=${{ github.event.pull_request.number }} \
          -Dsonar.pullrequest.branch=${{ github.event.pull_request.head.ref }} \
          -Dsonar.pullrequest.base=${{ github.event.pull_request.base.ref }}
    
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          target/surefire-reports/
          target/site/jacoco/
        retention-days: 7
    
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: target/*.jar
        retention-days: 7
    
    - name: Comment PR with Build Status
      uses: actions/github-script@v7
      if: always()
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { data: checks } = await github.rest.checks.listForRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.payload.pull_request.head.sha,
          });
          
          const buildCheck = checks.check_runs.find(check => check.name === 'build-and-analyze');
          const status = buildCheck ? buildCheck.conclusion : 'unknown';
          
          const body = `## 🔍 Build and Quality Analysis Results
          
          **Status:** ${status === 'success' ? '✅ PASSED' : '❌ FAILED'}
          
          ### Checks Performed:
          - ✅ Maven Build
          - ✅ Unit Tests
          - ✅ Code Formatting (Spotless)
          - ✅ SonarQube Analysis
          - ✅ Test Coverage Report
          
          ### Next Steps:
          ${status === 'success' ? 
            '🎉 All quality checks passed! This PR is ready for review.' : 
            '⚠️ Please fix the failing checks before merging this PR.'}
          
          ---
          *This comment was automatically generated by the PR Build workflow.*`;
          
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.pull_request.number,
          });
          
          const botComment = comments.data.find(comment => 
            comment.user.login === 'github-actions[bot]' && 
            comment.body.includes('Build and Quality Analysis Results')
          );
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body,
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: body,
            });
          }