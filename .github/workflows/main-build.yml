name: Main Branch Build

on:
  push:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  build-and-analyze:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven

    - name: Cache SonarQube packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run Tests and Build
      run: mvn clean verify

    - name: Check Code Formatting
      run: mvn spotless:check

    - name: Generate Test Coverage Report
      run: mvn jacoco:report

    - name: SonarQube Analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        mvn sonar:sonar \
          -Dsonar.projectKey=${{ vars.SONAR_PROJECT_KEY }} \
          -Dsonar.host.url=${{ vars.SONAR_HOST_URL }} \
          -Dsonar.token=${{ secrets.SONAR_TOKEN }}

    - name: Upload Coverage Reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Create Release Draft
      if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Read version from pom.xml
          const pom = fs.readFileSync('pom.xml', 'utf8');
          const versionMatch = pom.match(/<version>(.*?)<\/version>/);
          const version = versionMatch ? versionMatch[1] : 'unknown';
          
          // Create draft release
          await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: `v${version}`,
            name: `Release v${version}`,
            body: `## What's Changed\n\n- Automated release for version ${version}\n\n**Full Changelog**: https://github.com/${context.repo.owner}/${context.repo.repo}/compare/v${version}...v${version}`,
            draft: true,
            prerelease: version.includes('SNAPSHOT')
          });